# Simulate an AR model with 0.5 slope and 100 observations
x <- arima.sim(model = list(ar =0.5), n = 100)
# Simulate an AR model with 0.9 slope
y <- arima.sim(model = list(ar=0.9), n = 100)
# Simulate an AR model with -0.75 slope
z <-  arima.sim(model = list(ar= -0.75), n =100)
# Plot your simulated data
plot.ts(cbind(x, y, z))
# Calculate the ACF for x
acf(x)
# Calculate the ACF for y
acf(y)
# Calculate the ACF for z
acf(z)
#
## Compare the random walk (RW) and autoregressive (AR) models
#
# Simulate and plot AR model with slope 0.9
x <- arima.sim(model = list(ar = 0.9), n = 200)
ts.plot(x)
acf(x)
# Simulate and plot AR model with slope 0.98
y <- arima.sim(model = list(ar = 0.98), n = 200)
ts.plot(y)
acf(y)
# Simulate and plot RW model
z <- arima.sim(model = list(order=c(0,1,0)), n = 200)
ts.plot(z)
acf(z)
data(Mishkin, package = "Ecdat")
install.packages("Ecdat")
data(Mishkin, package = "Ecdat")
inflation <- as.ts(Mishkin[,1])
AR_inflation <- arima(inflation, order = c(1,0,0)) # first-order AR model
print(AR_inflation) # summary
ts.plot(inflation)
AR_inflation_fitted <- inflation - residuals(AR_inflation)
points(AR_inflation_fitted, type = "1",
col = "red", lty = 2) ## draw points function
predict(AR_inflation)$pred
AR_inflation
## Forecasting
predict(AR_inflation, n.ahead = 6)$pred
predict(AR_inflation, n.ahead = 6)$se
# Fit the AR model to AirPassengers
AR <- arima(AirPassengers, order = c(1,0,0))
print(AR)
# Plot the series and fitted values
ts.plot(AirPassengers)
AR_fitted <- AirPassengers - residuals(AR)
points(AR_fitted, type = "l", col = 2, lty = 2)
data(Mishkin, package = "Ecdat")
inflation <- as.ts(Mishkin[,1])
acf(inflation_changes, lag.max = 24)
##
### MA model estimation and forecasting
##
data(Mishkin, package = "Ecdat")
inflation <- as.ts(Mishkin[,1])
#calcute change in inflation
inflation_changes <- diff(inflation) ## change in 1-month inflation rate
ts.plot(inflation) ; ts.plot(inflation_changes) ## plot
acf(inflation_changes, lag.max = 24)
MA_inflation_changes <- arima(inflation_changes, order = c(0,0,1))
## fit ma model into inflation
MA_inflation_changes <- arima(inflation_changes, order = c(0,0,1)) ## first-order ma model
print(MA_inflation_changes)
## fitted values
MA_inflation_changes_fitted <- inflation_changes - residuals(MA_inflation_changes)
## plot fitted values
plot(MA_inflation_changes_fitted)
points(MA_inflation_changes_fitted, type = "1", col = "red", lty = 2)
points(MA_inflation_changes_fitted, type = "l", col = "red", lty = 2)
install.packages("astsa")
## First things first
#
library(astsa)
plot(jj, main = "Johnson and Johnson quarterly earning per share",type ="c")
text(jj,labels = 1:4, col = 1:4)
## S&P 500 Weekly Returns
# no trends or seasonality
library(xts)
plot(sp500w,main = "S&P 500 Weekly return")
install.packages('astsa')
library(astsa)
data(globtemp)
data(cmort)
# Plot globtemp and detrended globtemp
par(mfrow = c(2,1))
plot(globtemp)
plot(diff(globtemp))
# Plot cmort and detrended cmort
par(mfrow = c(2,1))
plot(cmort)
plot(diff(cmort))
library(xts)
install.packages('xts')
install.packages('xts')
install.packages("xts")
library(xts)
data(djia)
data(gnp)
install.packages('zoo')
install.packages("zoo")
library(xts)
data(djia)
data(gnp)
library(xts)
library(astsa)
data(djia)
data(gnp)
# Plot GNP series (gnp) and its growth rate
par(mfrow = c(2,1))
plot(gnp)
plot(diff(log(gnp)))
# Plot DJIA closings (djia$Close) and its returns
par(mfrow = c(2,1))
plot(djia$Close)
plot(diff(log(djia$Close)))
## Generate AR
x <- arima.sim(list(order = c(2,0,0),ar = c(0,-0.9)), n =100)
plot(X)
## Generate AR
y <- arima.sim(list(order = c(2,0,0),ar = c(0,-0.9)), n =100)
plot(y)
# Generate and plot white noise
WN <- arima.sim( model = list(order=c(0,0,0)),n=200)
plot(WN)
# Generate and plot an MA(1) with parameter .9
MA <- arima.sim(model = list(order = c(0,0,1),ma=0.9),n=200)
plot(MA)
# Generate and plot an AR(2) with parameters 1.5 and -.75
AR <- arima.sim(list(order = c(2,0,0),ar = c(1.5,-0.75)), n =200)
plot(AR)
install.packages("coronavirus")
devtools::install_github("covid19r/coronavirus")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("covid19r/coronavirus")
library(coronavirus)
data("coronavirus")
x<- arima.sim(list(order = c(2,0,0),ar = c(1.5,-0.75)),n = 200) +50
x_fit <-sarima(x, p =2, d=0, q=0)
x_fit$table
install.packages("sarima")
x_fit <-sarima(x, p =2, d=0, q=0)
x_fit$table
library(astsa)
x<- arima.sim(list(order = c(2,0,0),ar = c(1.5,-0.75)),n = 200) +50
x_fit <-sarima(x, p =2, d=0, q=0)
x_fit$table
x_fit$ttable
x_fit <- sarima(x, p =1, d= 0, q=1)
x_fit$ttable
x_arma <- arima.sim(list(order = c(1,0,1),
ar =0.9,
ma = -0.4),
n = 200)
plot(x_arma, main = "ARMA(1,1)")
x_arma <- arima.sim(list(order = c(1,0,1),
ar =0.9,
ma = -0.4),
n = 200)
plot(x_arma, main = "ARMA(1,1)")
x_arma_fit <- sarima(x_arma, p =1, d= 0, q=1)
x_arma_fit$ttable
x <- arima.sim(model = list(order = c(0, 0, 1), ma = -.8), n = 100)
# Plot x
plot(x)
# Plot the sample P/ACF of x
plot(acf2(x))
dl_varve <- diff(log(varve))
acf(dl_varve)
dl_varve <- diff(log(varve))
acf(dl_varve)
pacf(dl_varve)
gnpgr <-diff(log(gnp))
sarima(gnpgr, p =1,d=0,q=0) ## fitting AR(1)
sarima(gnpgr, p=0,d=0,q=2) ## fitting MA(2)
x_ar<-sarima(gnpgr, p =1,d=0,q=0) ## fitting AR(1)
x_ar$AIC
x_ar$AIC, x_ar$BIC
x_ar$AIC; x_ar$BIC
gnpgr <-diff(log(gnp))
x_ar<-sarima(gnpgr, p =1,d=0,q=0) ## fitting AR(1)
x_ar$AIC; x_ar$BIC
x_ma_2 <- sarima(gnpgr, p=0,d=0,q=2) ## fitting MA(2)
x_ma_2$AIc; x_ma_2$BIC
x_ma_2$AIC; x_ma_2$BIC
x_ar$AIC; x_ar$BIC
# Fit an MA(1) to dl_varve.
ma_1_fit <- sarima(dl_varve,p=0,d=0,q=1)
ma_1_fit$AIC; ma_1_fit$BIC
# Fit an MA(2) to dl_varve. Improvement?
ma_2_fit <- sarima(dl_varve,p=0,d=0,q=2)
ma_2_fit$AIC; ma_2_fit$BIC
# Fit an ARMA(1,1) to dl_varve. Improvement?
arma_fit<-sarima(dl_varve,p=1,d=0,q=1)
arma_fit$AIC; arma_fit$BIC
# Fit an MA(1) to dl_varve. Examine the residuals
sarima(dl_varve,0,0,1)
# Fit an ARMA(1,1) to dl_varve. Examine the residuals
sarima(dl_varve,1,0,1)
data(oil)
# Calculate approximate oil returns
oil_returns <- diff(log(oil))
# Plot oil_returns. Notice the outliers.
plot(oil_returns)
# Plot the P/ACF pair for oil_returns
plot(acf2(oil_returns))
# Assuming both P/ACF are tailing, fit a model to oil_returns
sarima(oil_returns,1,0,1)
# Calculate approximate oil returns
oil_returns <- diff(log(oil))
# Plot oil_returns. Notice the outliers.
plot(oil_returns)
# Plot the P/ACF pair for oil_returns
plot(acf2(oil_returns))
# Assuming both P/ACF are tailing, fit a model to oil_returns
sarima(oil_returns,1,0,1)
## Simulation ARIMA (p =1,d=1,q=0)
x <- arima.sim(list(order = c (1,1,0), ar = 0.9), n =200)
plot(x, main ="ARIMA (p=1,d=1,q=0)")
plot(diff(x),main = "ARMA (p=1,d=0,q=0)")
x<- arima.sim(list(order = c(1,1,0),ar =0.9), n = 200)
acf2(x)
library(astsa)
## Simulation ARIMA (p =1,d=1,q=0)
x <- arima.sim(list(order = c (1,1,0), ar = 0.9), n =200)
plot(x, main ="ARIMA (p=1,d=1,q=0)")
plot(diff(x),main = "ARMA (p=1,d=0,q=0)")
x<- arima.sim(list(order = c(1,1,0),ar =0.9), n = 200)
acf2(x)
data(oil)
oil_diff <-diff(oil)
plot(oil_diff)
acf2(oil_diff)
acf2(oil)
x_2 <- arima.sim(model = list(order = c(2, 1, 0), ar = .9), n = 200)
x_2 <- arima.sim(model = list(order = c(2, 1, 0), ar = c(1.5,-.75)), n = 200)
# Plot sample P/ACF of differenced data and determine model
plot(acf2(diff(x_2)))
# Estimate parameters and examine output
x_2_fitted <-sarima(x_2,2,1,0)
x_2_fitted$ttable
# Fit an ARIMA(1,1,1) model to globtemp and calculate AIC and BIC
globtemp_fitted <-sarima(globtemp,1,1,1)
globtemp_fitted$AIC
globtemp_fitted$BIC
# Fit an ARIMA(0,1,2) model to globtemp and and calculate AIC and BIC
globtemp_fitted_2 <-sarima(globtemp,0,1,2)
globtemp_fitted_2$AIC
globtemp_fitted_2$BIC
help(oil)
help("window")
oil <- window(oil, end =2006)
x <-sarima(oil, p=1,d=1,q=1)
x$ttable
oil_fitted2 <- sarima(oil,p=1,1,2) # fit ARIMA(1,1,2) into oil
oil_fitted2$ttable
oil_fitted1 <-sarima(oil, p=1,d=1,q=1) ## fit ARIMA(1,1,1) into oil
oil_fitted1$ttable
oil_fitted2 <- sarima(oil,p=1,1,2) # fit ARIMA(1,1,2) into oil
oil_fitted2$ttable ## new parameter not significant
x <- arima.sim(model = list(order = c(0, 1, 1), ar = .9), n = 250)
x <- arima.sim(model = list(order = c(0, 1, 1), ma = .9), n = 250)
#
## Diagnostics - simulated overfitting
#
# Simulating ARIMA (0,1,1)
x <- arima.sim(model = list(order = c(0, 1, 1), ma = .9), n = 250)
# Plot sample P/ACF pair of the differenced data
plot(acf2(diff(x)))
# Fit the first model, compare parameters, check diagnostics
x_fitted <- sarima(x,0,1,1)
x_fitted$ttable
# Fit the second model and compare the overfit of new ma2
x_fitted_2 <-sarima(x,0,1,2)
x_fitted_2$ttable
# Fit ARIMA(0,1,2) to globtemp and check diagnostics
temp <- sarima(globtemp,0,1,2)
temp$ttable
temp$AIC
temp$BIC
# Fit ARIMA(1,1,1) to globtemp and check diagnostics
temp_2 <- sarima(globtemp,1,1,1)
temp_2$ttable
temp_2$AIC
temp_2$BIC
# Which is the better model?
"ARIMA(0,1,2)"
help("globtemp")
oil <- window(astsa::oil, end = 2006)
oilf <- window(astsa::oil, end = 2007)
sarima.for(oil,n.ahead = 52,1,1,1)
lines(oilf)
x <- window(x,end = 100)
## Simulate ARIMA(1,1,0) with ar = 0.9
x <- arima.sim(model = list(order = c(1, 1, 0), ar = .9), n = 120)
# Plot P/ACF pair of differenced data
plot(acf2(diff(x)))
x <- window(x,end = 100)
xf <- window(x,end = 120)
# Fit model - check t-table and diagnostics
x_fitted<-sarima(x,1,1,0)
x_fitted$ttable
# Forecast the data 20 time periods ahead
sarima.for(x, n.ahead = 20, p = 1, d = 1, q = 0)
lines(xf)
xf <- window(x,end = 120)
sarima.for(x, n.ahead = 20, p = 1, d = 1, q = 0)
lines(x)
## Simulate ARIMA(1,1,0) with ar = 0.9
x <- arima.sim(model = list(order = c(1, 1, 0), ar = .9), n = 120)
# Plot P/ACF pair of differenced data
plot(acf2(diff(x)))
x_100 <- window(x,end = 100)
xf <- window(x,end = 120)
# Fit model - check t-table and diagnostics
x_fitted<-sarima(x_100,1,1,0)
x_fitted$ttable
# Forecast the data 20 time periods ahead
sarima.for(x_100, n.ahead = 20, p = 1, d = 1, q = 0)
lines(x)
# Fit an ARIMA(0,1,2) to globtemp and check the fit
sarima(globtemp,0,1,2)
# Forecast data 35 years into the future
sarima.for(globtemp,n.ahead = 35, 0,1,2)
install.packages("forecast")
x <- data("AirPassengers")
lx <-log(x)
plot(lx)
x <- ts(data("AirPassengers"))
lx <-log(x)
plot(lx)
data("AirPassengers")
attach(AirPassengers)
x <- ts(AirPassengers)
data(AirPassengers)
attach(AirPassengers)
x <- ts(AirPassengers)
data(AirPassengers)
x <- ts(as.vector(AirPassengers))
x <- ts(as.vector(AirPassengers))
lx <-log(x)
plot(lx)
dlx <- diff(lx) # detrend lx
plot(dlx)
ddlx <- diff(dlx,12) ## seasonal difference to deal with seasonal persistence
plot(ddlx)
sarima(ddlx, p = 0, d = 1, q = 0, P = 0, D = 1, Q = 0, S = 12)
acf2(air_fitted)
air_fitted <- sarima(ddlx, p = 0, d = 1, q = 0, P = 0, D = 1, Q = 0, S = 12)
acf2(air_fitted)
acf2(ddlx)
air_fitted <- sarima(log(AirPassengers), p = 1,
d = 1, q = 1, P = 0,
D = 1, Q = 1, S = 12)
air_fitted$ttable
airpass_fit2 <- sarima(log(AirPassengers),0,1,1,0,1,1,12)
airpass_fit2$ttable
airpass_fit2 <- sarima(log(AirPassengers),0,1,1,0,1,1,12)
airpass_fit2$ttable
# Plot P/ACF pair of the fully differenced data to lag 60
dd_unemp <- diff(diff(unemp), lag = 12)
acf2(dd_unemp, max.lag = 60)
# Fit an appropriate model
sarima(unemp, p = 2, d = 1, q = 0, P = 0, D = 1, Q = 1, S = 12)
# Plot P/ACF pair of the fully differenced data to lag 60
dd_unemp <- diff(diff(unemp), lag = 12)
acf2(dd_unemp, max.lag = 60)
# Fit an appropriate model
unemp_fitted <- sarima(unemp, p = 2, d = 1, q = 0, P = 0, D = 1, Q = 1, S = 12)
unemp_fitted$ttable
data("chicken")
plot(chicken)
# Plot differenced chicken
plot(diff(chicken))
# Plot P/ACF pair of differenced data to lag 60
acf2(diff(chicken),max.lag=60)
#notice AR(2) seems appropriate
# Fit ARIMA(2,1,0) to chicken - not so good
arima_fit <- sarima(chicken,2,1,0)
arima_fit$ttable
# Fit SARIMA(2,1,0,1,0,0,12) to chicken - that works
arima_fit <- sarima(chicken,2,1,0,1,0,0,12)
#
data("birth")
plot(birth)
# Plot P/ACF to lag 60 of differenced data
d_birth <- diff(birth)
acf2(d_birth,max.lag = 60)
# Plot P/ACF to lag 60 of seasonal differenced data
dd_birth <- diff(d_birth, lag = 12)
acf2(dd_birth,max.lag = 60)
# Fit SARIMA(0,1,1)x(0,1,1)_12. What happens?
sarima(birth,0,1,1,0,1,1,12)
# Add AR term ar = 1 to account for additional correlation
sarima(birth,1,1,1,0,1,1,12)
sarima.for(log(AirPassengers),n.ahead = 24,
0,1,1,0,1,1,12)
# Fit your previous model to unemp and check the diagnostics
unemp_fitted <- sarima(unemp, p = 2, d = 1, q = 0, P = 0, D = 1, Q = 1, S = 12)
unemp_fitted$ttable
# Forecast the data 3 years into the future
sarima.for(unemp,n.ahead = 36, 2,1,0,0,1,1,12)
library(readxl)
library(forecast)
autoplot(myts)
#
## Time series plot
#
autoplot(myts)
setwd("C:/Users/dell/Desktop/DataCamp-Practice/Time Series in R/Forecasting using R")
library(readxl)
library(forecast)
# Read the data from Excel into R
mydata <- read_excel("exercise1.xlsx")
# Look at the first few lines of mydata
head(mydata)
# Create a ts object for sales
myts <- ts(mydata['Sales'], start = c(1881, 3), frequency = 4)
plot(myts)
# Create a ts object for all columns
myts <- ts(mydata[, 2:4], start = c(1981, 1), frequency = 4)
#
## Time series plot
#
autoplot(myts)
autoplot(myts,facets = T)
# Load the fpp2 package
library(fpp2)
# Load the data
data(a10)
install.packages("fpp2")
# Load the fpp2 package
library(fpp2)
# Load the data
data(a10)
# Load the data
data(a10)
data(ausbeer)
# Load the data
data(a10) #monthly sales volumes for anti-diabetic drugs in Australia
data(ausbeer) #contains quarterly beer production for Australia
# Create plots of the a10 data
autoplot(a10)
ggseasonplot(a10)
# Produce a polar coordinate season plot for the a10 data
ggseasonplot(a10, polar = T)
# Restrict the ausbeer data to start in 1992
beer <- window(ausbeer, 1992)
# Make plots of the beer data
autoplot(beer)
ggsubseriesplot(beer)
#
## Autocorrelation of non-seasonal time series
#
data(oil)
# Create an autoplot of the oil data
autoplot(oil)
# Create a lag plot of the oil data
gglagplot(oil)
# Create an ACF plot of the oil data
ggAcf(oil)
#
## Autocorrelation of seasonal and cyclic time series
#
data("sunspot.year")
data("hyndsight")
# Plot the annual sunspot numbers
autoplot(sunspot.year)
ggAcf(sunspot.year)
# Save the lag corresponding to maximum autocorrelation
maxlag_sunspot <- 1
# Plot the traffic on the Hyndsight blog
autoplot(hyndsight)
ggAcf(hyndsight)
# Save the lag corresponding to maximum autocorrelation
maxlag_hyndsight <- 7
set.seed(3)
wn <-ts(rnorm(36))
autoplot(wn)
install.packages("fma")
install.packages("fma")
library(fma)
data(pigs)
install.packages("fma")
install.packages("fma")
install.packages("fma")
library(fma)
data(pigs)
data(pig)
data("goog")
#
## Stock prices and white noise
#
data(goog)
library(fpp2)
data("goog")
data(goog)
# Plot the original series
autoplot(goog)
# Plot the differenced series
autoplot(diff(goog))
# ACF of the differenced series
ggAcf(diff(goog))
# Ljung-Box test of the differenced series
Box.test(diff(goog), lag = 10, type = "Ljung")
