# Plot forecasts of fit
fit %>% forecast(h = 10) %>% autoplot()
# Plot forecasts from an ARIMA(0,1,1) model with no drift
austa %>% Arima(order = c(0, 1, 1), include.constant = FALSE) %>%
forecast() %>% autoplot()
# Plot forecasts from an ARIMA(2,1,3) model with drift
austa %>% Arima(order = c(2,1,3),include.constant = TRUE) %>% forecast() %>% autoplot()
# Plot forecasts from an ARIMA(0,0,1) model with a constant
austa %>% Arima(order = c(0,0,1),include.constant = TRUE) %>% forecast() %>% autoplot()
# Plot forecasts from an ARIMA(0,2,1) model with no constant
austa %>% Arima(order = c(0,2,1),include.constant = FALSE) %>% forecast() %>% autoplot()
data("debitcards") ## Iceland debit cards useage
autoplot(debitcards) + xlab("Year") + ylab("millions ISK")+
ggtitle("Retail debit card usage in Iceland")
fit <-auto.arima(debitcards,lambda = 0) ## box-cox lambda = 0 = log transform
fit_seasonal <-auto.arima(debitcards,lambda = 0) ## box-cox lambda = 0 = log transform
fit_Seasonal
fit_seasonal
fit_seasonal %>% forecast(=36) %>%
autoplot() + xlab("Year")
fit_seasonal %>% forecast(h=36) %>%
autoplot() + xlab("Year")
# Find an ARIMA model for euretail
fit1 <- auto.arima(euretail)
# Don't use a stepwise search
fit2 <- auto.arima(euretail, stepwise = FALSE)
# AICc of better model
AICc <- 68.39
# Compute 2-year forecasts from better model
fit2 %>% forecast(h = 8) %>% autoplot()
fit2
fit1
# Use 20 years of the qcement data beginning in 1988
train <- window(qcement, start = 1988, end = c(2007,4))
# Fit an ARIMA and an ETS model to the training data
fit1 <- auto.arima(train)
fit2 <- ets(train)
# Check that both models have white noise residuals
checkresiduals(fit1)
checkresiduals(fit2)
# Produce forecasts for each model
fc1 <- forecast(fit1, h = 25)
fc2 <- forecast(fit2, h = 25)
# Use accuracy() to find better model based on RMSE
accuracy(fc1, qcement)
accuracy(fc2, qcement)
bettermodel <- fit2
#
## Dynamic regression
#
data("uschange")
#plot us personal consumption and income
autoplot(uschange[,1:2], facets = TRUE) + xlab("Year")
data("uschange")
#plot us personal consumption and income
autoplot(uschange[,1:2], facets = TRUE) + xlab("Year")
## relationship between income and consumption
ggplot(aes(x = Income, y = Consumption),
data = as.data.frame(uschange)) +
geom_point() +
ggtitle("Quarterly changes in US consumption and personal income")
fit <- auto.arima(uschange[,"Consumption"],
xreg = uschange[,"Income"])\
fit
## Fitting dynamic regression, add xreg argument
fit <- auto.arima(uschange[,"Consumption"],
xreg = uschange[,"Income"])
fit
checkresiduals(fit)
autoplot(fcast) + ylab("Percentage Change")
fcast <- forecast(fit, xreg = rep(0.8,8)) ## assumefuture income change by 0.8 per quarter for the next 8 quarter
autoplot(fcast) + ylab("Percentage Change")
data(advert)
data(advert,package = fma)
install.packages(fma)
install.packages("fma")
install.packages("fma")
library(fma)
data(advert)
data(advert,package = 'fma')
library(fpp2)
data(cafe)
library(fpp2)
library(fpp)
data(cafe)
library(fpp2)
library(fpp)
data(cafe)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=1),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=1, h =24)) %>%
autoplot() +ylim(1.6,5.1)
autoplot(fit)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=3),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=3, h =24)) %>%
autoplot() +ylim(1.6,5.1)
data(cafe)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=3),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=3, h =24)) %>%
autoplot() +ylim(1.6,5.1)
cafe
data(cafe)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=1),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=1, h =24)) %>%
autoplot() +ylim(1.6,5.1)
#
## Forecast weekly data
#
# Set up harmonic regressors of order 13
harmonics <- fourier(gasoline, K = 13)
# Fit regression model with ARIMA errors
fit <- auto.arima(gasoline, xreg = harmonics, seasonal = FALSE)
# Forecasts next 3 years
newharmonics <- fourier(gasoline, K = 13, h = 156)
fc <- forecast(fit, xreg = newharmonics)
# Plot forecasts fc
autoplot(fc)
data(taylor)
#
##Harmonic regression for multiple seasonality
#
data(taylor)#half-hourly electricity demand in England
## 2 seasonality 48(daily seasonality) and 3*48 = 336 (weekly seasonality)
# Fit a harmonic regression using order 10 for each type of seasonality
fit <- tslm(taylor ~ fourier(taylor, K = c(10, 10)))
# Forecast 20 working days ahead
fc <- forecast(fit, newdata = data.frame(fourier(, K = c(10, 10), h = 20*48)))
# Plot the forecasts
autoplot(fc)
# Forecast 20 working days ahead
fc <- forecast(fit, newdata = data.frame(fourier(taylor, K = c(10, 10), h = 20*48)))
# Plot the forecasts
autoplot(fc)
# Plot the calls data
autoplot(calls)
# Set up the xreg matrix
xreg <- fourier(calls, K = c(10,0))
# Fit a dynamic regression model
fit <- auto.arima(calls, xreg = xreg, seasonal = FALSE, stationary = TRUE)
# Check the residuals
checkresiduals(fit)
# Plot forecasts for 10 working days ahead
fc <- forecast(fit, xreg =  fourier(calls, c(10, 0), h = 1690))
autoplot(fc)
data("gasoline")
gasoline %>% tbats() %>% forecast() %>%
autoplot() +
xlab("Year") + ylab("thousands barrels per day")
# Plot the gas data
autoplot(gas)
# Fit a TBATS model to the gas data
fit <- tbats(gas)
# Forecast the series for the next 5 years
fc <- forecast(fit,h=60)
# Plot the forecasts
autoplot(fc)
# Record the Box-Cox parameter and the order of the Fourier terms
lambda <- 0.082
K <- 5
setwd("C:/Users/dell/Desktop/DataCamp-Practice/Time Series in R/Case Studies Manipulating Time Series Data in R")
unemployment <- readRDS("unemployment.RData")
lty = c(1,2)
labels = c("MA Unemployment (%)","MA Unemployment (%)")
# View a summary of your unemployment data
summary(unemployment)
# Use na.approx to remove missing values in unemployment data
unemployment <- na.approx(unemployment)
# Plot new unemployment data
plot.zoo(unemployment, plot.type = "single", lty = lty)
legend("topright", lty = lty, legend = labels, bg = "white")
library(zoo)
library(fpp2)
library(xts)
# View a summary of your unemployment data
summary(unemployment)
# Use na.approx to remove missing values in unemployment data
unemployment <- na.approx(unemployment)
# Plot new unemployment data
plot.zoo(unemployment, plot.type = "single", lty = lty)
legend("topright", lty = lty, legend = labels, bg = "white")
#
## Handling missingness
#
#fill nas with last observation
y <- na.locf(x) ## last observation carried forward(LOCF)
plot(x)
plot(y)
na.locf(x, fromLast = TRUE) ## next observation carried backward(NOCB)
na.approx(x) ## linear interpolation
library(zoo)
library(fpp2)
library(xts)
#
## Exploring economic data
#
gdp <- readRDS("us_gdp.RData")
# Get a summary of your GDP data
summary(gdp)
# Convert GDP date column to time object
gdp$date <- as.yearqtr(gdp$date)
# Convert GDP data to xts
gdp_xts <- as.xts(gdp[, -1], order.by = gdp$date)
# Plot GDP data over time
plot.xts(gdp_xts)
#
## Replace missing data
#
# Fill NAs in gdp_xts with the last observation carried forward
gdp_locf <- na.locf(gdp_xts)
# Fill NAs in gdp_xts with the next observation carried backward
gdp_nocb <- na.locf(gdp_xts,fromLast = TRUE)
# Produce a plot for each of your new xts objects
par(mfrow = c(2,1))
plot.xts(gdp_locf, major.format = "%Y")
plot.xts(gdp_nocb, major.format = "%Y")
# Query for GDP in 1993 in both gdp_locf and gdp_nocb
gdp_locf["1993"]
gdp_nocb['1993']
#
## Replace missing data - II using linear approximation
#
# Fill NAs in gdp_xts using linear approximation
gdp_approx <- na.approx(gdp_xts)
# Plot your new xts object
plot.xts(gdp_approx, major.format = "%Y")
# Query for GDP in 1993 in gdp_approx
gdp_approx["1993"]
#
## Lagging and differencing
#
unemployment <- readRDS("unemployment.RData")
lty = c(1,2)
labels = c("US Unemployment (%)","MA Unemployment (%)")
# View a summary of your unemployment data
summary(unemployment)
# Use na.approx to remove missing values in unemployment data
unemployment <- na.approx(unemployment)
# Plot new unemployment data
plot.zoo(unemployment, plot.type = "single", lty = lty)
legend("topright", lty = lty, legend = labels, bg = "white")
# Create a one month lag of US unemployment
us_monthlag <- lag(unemployment$us, k = 1)
# Create a one year lag of US unemployment
us_yearlag <- lag(unemployment$us, k =12)
# Merge original unemployment data with your new lags
unemployment_lags <- merge(unemployment, us_monthlag, us_yearlag)
# View the first 15 rows of unemployment_lags
head(unemployment_lags, n =15)
# Generate monthly difference in unemployment
unemployment$us_monthlydiff <- diff(unemployment$us, lag = 1, differences = 1)
# Generate yearly difference in unemployment
unemployment$us_yearlydiff <- diff(unemployment$us, lag = 12, differences = 1)
# Plot US unemployment and annual difference
par(mfrow = c(2,1))
plot.xts(unemployment$us)
plot.xts(unemployment$us_yearlydiff, type = "h") # barplot
# Add a quarterly difference in gdp
gdp$quarterly_diff <- diff(gdp$gdp, lag = 1, differences = 1)
#
## Handling missingness
#
#fill nas with last observation
y <- na.locf(x) ## last observation carried forward(LOCF)
plot(x)
plot(y)
na.locf(x, fromLast = TRUE) ## next observation carried backward(NOCB)
na.approx(x) ## linear interpolation
library(zoo)
library(fpp2)
library(xts)
#
## Exploring economic data
#
gdp <- readRDS("us_gdp.RData")
# Get a summary of your GDP data
summary(gdp)
# Convert GDP date column to time object
gdp$date <- as.yearqtr(gdp$date)
# Convert GDP data to xts
gdp_xts <- as.xts(gdp[, -1], order.by = gdp$date)
# Plot GDP data over time
plot.xts(gdp_xts)
#
## Replace missing data
#
# Fill NAs in gdp_xts with the last observation carried forward
gdp_locf <- na.locf(gdp_xts)
# Fill NAs in gdp_xts with the next observation carried backward
gdp_nocb <- na.locf(gdp_xts,fromLast = TRUE)
# Produce a plot for each of your new xts objects
par(mfrow = c(2,1))
plot.xts(gdp_locf, major.format = "%Y")
plot.xts(gdp_nocb, major.format = "%Y")
# Query for GDP in 1993 in both gdp_locf and gdp_nocb
gdp_locf["1993"]
gdp_nocb['1993']
#
## Replace missing data - II using linear approximation
#
# Fill NAs in gdp_xts using linear approximation
gdp_approx <- na.approx(gdp_xts)
# Plot your new xts object
plot.xts(gdp_approx, major.format = "%Y")
# Query for GDP in 1993 in gdp_approx
gdp_approx["1993"]
#
## Lagging and differencing
#
unemployment <- readRDS("unemployment.RData")
lty = c(1,2)
labels = c("US Unemployment (%)","MA Unemployment (%)")
# View a summary of your unemployment data
summary(unemployment)
# Use na.approx to remove missing values in unemployment data
unemployment <- na.approx(unemployment)
# Plot new unemployment data
plot.zoo(unemployment, plot.type = "single", lty = lty)
legend("topright", lty = lty, legend = labels, bg = "white")
#
## Lagging and unemployment
#
# Create a one month lag of US unemployment
us_monthlag <- lag(unemployment$us, k = 1)
# Create a one year lag of US unemployment
us_yearlag <- lag(unemployment$us, k =12)
# Merge original unemployment data with your new lags
unemployment_lags <- merge(unemployment, us_monthlag, us_yearlag)
# View the first 15 rows of unemployment_lags
head(unemployment_lags, n =15)
#
## Differencing unemployment
#
# Generate monthly difference in unemployment
unemployment$us_monthlydiff <- diff(unemployment$us, lag = 1, differences = 1)
# Generate yearly difference in unemployment
unemployment$us_yearlydiff <- diff(unemployment$us, lag = 12, differences = 1)
# Plot US unemployment and annual difference
par(mfrow = c(2,1))
plot.xts(unemployment$us)
plot.xts(unemployment$us_yearlydiff, type = "h") # barplot
gdp$quarterly_diff <- diff(gdp$gdp, lag = 1, differences = 1)
head(gdp)
gdp <- readRDS("us_gdp.RData")
gdp$quarterly_diff <- diff(gdp$gdp, lag = 1, differences = 1)
head(gdp)
gdp$quarterly_diff <- diff(gdp$gdp_billions, lag = 1, differences = 1)
a <- diff(gdp$gdp_billions)
length(a)
head(a)
b <- c(NA,a)
head(b)
length((b))
a  <- c(NA,diff(gdp$gdp_billions, lag = 1, differences = 1))
gdp$quarterly_diff <- a
gdpchange_years <- split(gdp$quarterly_diff, f = "years")
head(gdpchange_years)
gdpchange_xts <- do.call(rbind, gdpchange_ytd)
gdpchange_ytd <- lapply(gdpchange_years, FUN = cumsum)
gdpchange_xts <- do.call(rbind, gdpchange_ytd)
plot.xts(gdpchange_xts, type = "h")
head(gdpchange_xts)
head(gdp$quarterly_diff)
cbind(gdp, a)
gdp <- readRDS("us_gdp.RData")
gdp$date <- as.Date(gdp$date)
gdp <- as.xts(gdp[ , -1], order.by = gdp$date)
gdp <- as.xts(gdp[ , -1], order.by = gdp$date)
gdp <- as.xts(gdp[ , -1], order.by = as.POSIXct(gdp$date))
gdp <- readRDS("us_gdp.RData")
# Convert GDP date column to time object
gdp$date <- as.yearqtr(gdp$date)
# Convert GDP data to xts
gdp <- as.xts(gdp[, -1], order.by = gdp$date)
head(gdp)
gdp <- readRDS("us_gdp.RData")
# Convert GDP date column to time object
gdp$date <- as.yearqtr(gdp$date)
head(gdp)
gdp <- as.xts(gdp[, -1], order.by = gdp$date)
head(gdp)
colnames(gdp) <- c("gdp")
a  <- diff(gdp$gdp_billions, lag = 1, differences = 1)
gdp$quarterly_diff <- a
gdp$quarterly_diff <- diff(gdp$gdp_billions, lag = 1, differences = 1)
gdp <- readRDS("us_gdp.RData")
# Convert GDP date column to time object
gdp$date <- as.yearqtr(gdp$date)
# Convert GDP data to xts
gdp <- as.xts(gdp[, -1], order.by = gdp$date)
colnames(gdp) <- c("gdp")
gdp$quarterly_diff <- diff(gdp$gdp, lag = 1, differences = 1)
head(gdp)
gdpchange_years <- split(gdp$quarterly_diff, f = "years")
head(gdpchange_years)
gdpchange_ytd <- lapply(gdpchange_years, FUN = cumsum)
head(gdpchange_ytd)
gdpchange_xts <- do.call(rbind, gdpchange_ytd)
head(gdpchange_xts)
plot.xts(gdpchange_xts, type = "h")
## Replace missing data - II using linear approximation
# Fill NAs in gdp_xts using linear approximation
gdp_approx <- na.approx(gdp_xts)
# Plot your new xts object
plot.xts(gdp_approx, major.format = "%Y")
# Query for GDP in 1993 in gdp_approx
gdp_approx["1993"]
# Add a quarterly difference in gdp
gdp$quarterly_diff <- diff(gdp$gdp, lag = 1, differences = 1)
# Split gdp$quarterly_diff into years
gdpchange_years <- split(gdp$quarterly_diff, f = "years")
# Use lapply to calculate the cumsum each year
gdpchange_ytd <- lapply(gdpchange_years, FUN = cumsum)
# Use do.call to rbind the results
gdpchange_xts <- do.call(rbind, gdpchange_ytd)
# Plot cumulative year-to-date change in GDP
plot.xts(gdpchange_xts, type = "h")
# Use rollapply to calculate the rolling yearly average US unemployment
unemployment$year_avg <- rollapply(unemployment$us, width =12 , FUN = "mean")
# Plot all columns of US unemployment data
plot.zoo(unemployment[, c("us", "year_avg")], plot.type = "single", lty = lty, lwd = lwd)
lty = c(2,1)
lwd = c(1,2)
# Plot all columns of US unemployment data
plot.zoo(unemployment[, c("us", "year_avg")], plot.type = "single", lty = lty, lwd = lwd)
# Add a one-year lag of MA unemployment
unemployment$ma_yearlag <- lag(unemployment$ma, k = 12)
# Add a six-month difference of MA unemployment
unemployment$ma_sixmonthdiff <- diff(unemployment$ma, lag = 6, differences = 1)
# Add a six-month rolling average of MA unemployment
unemployment$ma_sixmonthavg <- rollapply(unemployment$ma, width = 6, FUN = mean)
# Add a yearly rolling maximum of MA unemployment
unemployment$ma_yearmax <- rollapply(unemployment$ma, width = 12, FUN = max)
# View the last year of unemployment data
tail(unemployment, n = 12)
unemployment <- readRDS("unemployment.RData")
head(unemployment)
years <- endpoints(unemployment, on = "years")
unemployment[years]
period. apply(unemployment,
INDEX= years,
FUN = mean)
period.apply(unemployment,
INDEX= years,
FUN = mean)
redsox <- readRDS("sports.RData")
head(redsox)
# View summary information about your redsox data
summary(redsox)
# Convert the date column to a time-based format
redsox$date <- as.Date(redsox$date)
# Convert your red sox data to xts
redsox_xts <- as.xts(redsox[,-1], order.by = redsox$date)
# Plot the Red Sox score and the opponent score over time
plot.zoo(redsox_xts[, c("boston_score", "opponent_score")])
# Convert the date column to a time-based format
redsox$date <- as.Date(redsox$Index)
# Convert your red sox data to xts
redsox_xts <- as.xts(redsox[,-1], order.by = redsox$date)
# Plot the Red Sox score and the opponent score over time
plot.zoo(redsox_xts[, c("boston_score", "opponent_score")])
redsox$date <- as.Date(redsox$Index)
head(redsox)
head(redsox_xts)
redsox <- readRDS("sports.RData")
head(redsox)
redsox_xts <- redsox
#
## Calculate a closing average
#
# Generate a new variable coding for red sox wins
redsox_xts$win_loss <- ifelse(redsox_xts$boston_score > redsox_xts$opponent_score, 1, 0)
# Identify the date of the last game each season
close <- endpoints(redsox_xts, on = "years")
# Calculate average win/loss record at the end of each season
period.apply(redsox_xts[, "win_loss"],
INDEX = close , FUN = mean)
#
# Select only the 2013 season
redsox_2013 <- redsox_xts["2013"]
# Use rollapply to generate the last ten average of 2013 season
lastten_2013 <- rollapply(redsox_2013$win_loss, width = 10, FUN = mean)
# Plot the last ten average during the 2013 season
plot.xts(lastten_2013, ylim = c(0, 1))
.index(unemployment)
sunday_games <- which(.indexwday(redsox_xts) == 0)
head(redsox)
sports <- redsox_xts
# Extract the day of the week of each observation
weekday <- .indexwday(sports)
head(weekday)
# Generate an index of weekend dates
weekend <- which(.indexwday(sports) == 0 | .indexwday(sports) == 6)
# Subset only weekend games
weekend_games <- sports[weekend]
head(weekend_games)
# Generate a subset of sports data with only homegames
homegames <- sports[sports$homegame == 1]
# Calculate the win/loss average of the last 20 home games
homegames$win_loss_20 <- rollapply(homegames$win_loss, width = 20, FUN = mean)
# Calculate the win/loss average of the last 100 home games
homegames$win_loss_100 <- rollapply(homegames$win_loss, width = 100, FUN = mean)
lty = c(3,1)
lwd = c(1,2)
# Use plot.xts to generate
plot.zoo(homegames[, c("win_loss_20", "win_loss_100")], plot.type = "single", lty = lty, lwd = lwd)
