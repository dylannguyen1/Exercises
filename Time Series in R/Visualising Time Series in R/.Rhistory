}
# Apply tsCV() for both ETS and seasonal naive to calculate forecast errors
e1 <- tsCV(cement, fets, h = 4)
e2 <- tsCV(cement, snaive, h = 4)
# Compute MSE of resulting errors (watch out for missing values)
mean(e1^2, na.rm = TRUE)
mean(e2^2, na.rm = TRUE)
# Copy the best forecast MSE
bestmse <- 0.03046892
View(cement)
data(cement)
View(cement)
data(qcement)
## NOT WORKING, DIFFERENT CEMENT DATA REQUIRED
data(qcement)
# Function to return ETS forecasts
fets <- function(y, h) {
forecast(ets(y), h = h)
}
# Apply tsCV() for both ETS and seasonal naive to calculate forecast errors
e1 <- tsCV(qcement, fets, h = 4)
e2 <- tsCV(qcement, snaive, h = 4)
# Compute MSE of resulting errors (watch out for missing values)
mean(e1^2, na.rm = TRUE)
mean(e2^2, na.rm = TRUE)
# Copy the best forecast MSE
bestmse <- 0.03046892
data("qcement")
plot(qcement)
ets(qcement)
data("usmelec")
autoplot(usmelec) + xlab ("Year")+ ylab("") + ggtitle("US montly net electricity generation")
autoplot(usmelec) + xlab ("Year")+ ylab("") + ggtitle("US montly net electricity generation")
autoplot(usmelec^0.5) + xlab ("Year")+ ylab("") + ggtitle("US montly net electricity generation")
autoplot(log(usmelec)) + xlab ("Year")+ ylab("") + ggtitle("US montly net electricity generation")
autoplot(-1/usmelec) + xlab ("Year")+ ylab("") + ggtitle("US montly net electricity generation")
BoxCox.lambda(usmelec)
BoxCox.lambda(usmelec) ## choose lambda -0.477
usmelec %>% ets(lambda = -0.57) %>%
forecast(h=60) %>%
autoplot()
#
## Box-Cox transformations for time series
#
data(a10)
# Plot the series
autoplot(a10)
# Try four values of lambda in Box-Cox transformations
a10 %>% BoxCox(lambda =0.0) %>% autoplot()
a10 %>% BoxCox(lambda =0.1) %>% autoplot()
a10 %>% BoxCox(lambda =0.2) %>% autoplot()
a10 %>% BoxCox(lambda =0.3) %>% autoplot()
# Compare with BoxCox.lambda()
BoxCox.lambda(a10)
data("wmurders")
# Plot the US female murder rate
autoplot(wmurders)
# Plot the differenced murder rate
autoplot(diff(wmurders))
# Plot the ACF of the differenced murder rate
ggAcf(diff(wmurders))
data("h02")
# Plot the data
autoplot(h02)
# Take logs and seasonal differences of h02
difflogh02 <- diff(log(h02), lag = 12)
# Plot difflogh02
autoplot(difflogh02)
# Take another difference and plot
ddifflogh02 <- diff(difflogh02)
autoplot(ddifflogh02)
# Plot ACF of ddifflogh02
ggAcf(ddifflogh02)
autoplot(usnetelec)
fit <- auto.arima(usnetelec)
summary(fit)
fit %>% forecast() %>% autoplot()
# Fit an automatic ARIMA model to the austa series
fit <- auto.arima(austa)
# Check that the residuals look like white noise
checkresiduals(fit)
residualsok <- TRUE
# Summarize the model
summary(fit)
# Find the AICc value and the number of differences used
AICc <- -14.46
d <- 1
# Plot forecasts of fit
fit %>% forecast(h = 10) %>% autoplot()
# Plot forecasts from an ARIMA(0,1,1) model with no drift
austa %>% Arima(order = c(0, 1, 1), include.constant = FALSE) %>%
forecast() %>% autoplot()
# Plot forecasts from an ARIMA(2,1,3) model with drift
austa %>% Arima(order = c(2,1,3),include.constant = TRUE) %>% forecast() %>% autoplot()
# Plot forecasts from an ARIMA(0,0,1) model with a constant
austa %>% Arima(order = c(0,0,1),include.constant = TRUE) %>% forecast() %>% autoplot()
# Plot forecasts from an ARIMA(0,2,1) model with no constant
austa %>% Arima(order = c(0,2,1),include.constant = FALSE) %>% forecast() %>% autoplot()
data("debitcards") ## Iceland debit cards useage
autoplot(debitcards) + xlab("Year") + ylab("millions ISK")+
ggtitle("Retail debit card usage in Iceland")
fit <-auto.arima(debitcards,lambda = 0) ## box-cox lambda = 0 = log transform
fit_seasonal <-auto.arima(debitcards,lambda = 0) ## box-cox lambda = 0 = log transform
fit_Seasonal
fit_seasonal
fit_seasonal %>% forecast(=36) %>%
autoplot() + xlab("Year")
fit_seasonal %>% forecast(h=36) %>%
autoplot() + xlab("Year")
# Find an ARIMA model for euretail
fit1 <- auto.arima(euretail)
# Don't use a stepwise search
fit2 <- auto.arima(euretail, stepwise = FALSE)
# AICc of better model
AICc <- 68.39
# Compute 2-year forecasts from better model
fit2 %>% forecast(h = 8) %>% autoplot()
fit2
fit1
# Use 20 years of the qcement data beginning in 1988
train <- window(qcement, start = 1988, end = c(2007,4))
# Fit an ARIMA and an ETS model to the training data
fit1 <- auto.arima(train)
fit2 <- ets(train)
# Check that both models have white noise residuals
checkresiduals(fit1)
checkresiduals(fit2)
# Produce forecasts for each model
fc1 <- forecast(fit1, h = 25)
fc2 <- forecast(fit2, h = 25)
# Use accuracy() to find better model based on RMSE
accuracy(fc1, qcement)
accuracy(fc2, qcement)
bettermodel <- fit2
#
## Dynamic regression
#
data("uschange")
#plot us personal consumption and income
autoplot(uschange[,1:2], facets = TRUE) + xlab("Year")
data("uschange")
#plot us personal consumption and income
autoplot(uschange[,1:2], facets = TRUE) + xlab("Year")
## relationship between income and consumption
ggplot(aes(x = Income, y = Consumption),
data = as.data.frame(uschange)) +
geom_point() +
ggtitle("Quarterly changes in US consumption and personal income")
fit <- auto.arima(uschange[,"Consumption"],
xreg = uschange[,"Income"])\
fit
## Fitting dynamic regression, add xreg argument
fit <- auto.arima(uschange[,"Consumption"],
xreg = uschange[,"Income"])
fit
checkresiduals(fit)
autoplot(fcast) + ylab("Percentage Change")
fcast <- forecast(fit, xreg = rep(0.8,8)) ## assumefuture income change by 0.8 per quarter for the next 8 quarter
autoplot(fcast) + ylab("Percentage Change")
data(advert)
data(advert,package = fma)
install.packages(fma)
install.packages("fma")
install.packages("fma")
library(fma)
data(advert)
data(advert,package = 'fma')
library(fpp2)
data(cafe)
library(fpp2)
library(fpp)
data(cafe)
library(fpp2)
library(fpp)
data(cafe)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=1),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=1, h =24)) %>%
autoplot() +ylim(1.6,5.1)
autoplot(fit)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=3),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=3, h =24)) %>%
autoplot() +ylim(1.6,5.1)
data(cafe)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=3),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=3, h =24)) %>%
autoplot() +ylim(1.6,5.1)
cafe
data(cafe)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=1),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=1, h =24)) %>%
autoplot() +ylim(1.6,5.1)
#
## Forecast weekly data
#
# Set up harmonic regressors of order 13
harmonics <- fourier(gasoline, K = 13)
# Fit regression model with ARIMA errors
fit <- auto.arima(gasoline, xreg = harmonics, seasonal = FALSE)
# Forecasts next 3 years
newharmonics <- fourier(gasoline, K = 13, h = 156)
fc <- forecast(fit, xreg = newharmonics)
# Plot forecasts fc
autoplot(fc)
data(taylor)
#
##Harmonic regression for multiple seasonality
#
data(taylor)#half-hourly electricity demand in England
## 2 seasonality 48(daily seasonality) and 3*48 = 336 (weekly seasonality)
# Fit a harmonic regression using order 10 for each type of seasonality
fit <- tslm(taylor ~ fourier(taylor, K = c(10, 10)))
# Forecast 20 working days ahead
fc <- forecast(fit, newdata = data.frame(fourier(, K = c(10, 10), h = 20*48)))
# Plot the forecasts
autoplot(fc)
# Forecast 20 working days ahead
fc <- forecast(fit, newdata = data.frame(fourier(taylor, K = c(10, 10), h = 20*48)))
# Plot the forecasts
autoplot(fc)
# Plot the calls data
autoplot(calls)
# Set up the xreg matrix
xreg <- fourier(calls, K = c(10,0))
# Fit a dynamic regression model
fit <- auto.arima(calls, xreg = xreg, seasonal = FALSE, stationary = TRUE)
# Check the residuals
checkresiduals(fit)
# Plot forecasts for 10 working days ahead
fc <- forecast(fit, xreg =  fourier(calls, c(10, 0), h = 1690))
autoplot(fc)
data("gasoline")
gasoline %>% tbats() %>% forecast() %>%
autoplot() +
xlab("Year") + ylab("thousands barrels per day")
# Plot the gas data
autoplot(gas)
# Fit a TBATS model to the gas data
fit <- tbats(gas)
# Forecast the series for the next 5 years
fc <- forecast(fit,h=60)
# Plot the forecasts
autoplot(fc)
# Record the Box-Cox parameter and the order of the Fourier terms
lambda <- 0.082
K <- 5
setwd("C:/Users/dell/Desktop/DataCamp-Practice/Time Series in R/Forecasting using R")
setwd("C:/Users/dell/Desktop/DataCamp-Practice/Time Series in R/Visualising Time Series in R")
data<-read.csv("Existing-portfolio.csv")
data<-read.csv("Existing-portfolio.csv",header=True)
data<-read.csv("Existing-portfolio.csv",header=TRUE)
# Plot the portfolio value
plot(data$value, main = "Portfolio Value")
# Plot the portfolio return
plot(data$return, main = "Portfolio Return")
# Plot a histogram of portfolio return
hist(data$return, probability = TRUE)
# Add a density line in red and twice as thick as normal
lines(density(data$return), col = "red", lwd = 2)
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",header = TRUE)
# Plot the second time series and change title
plot(data$microsoft,main = "microsoft")
# Replot with same title, add subtitle, use bars
plot(data$microsoft, main = "microsoft", sub = "Daily closing price since 2015", type = "h")
# Change line color to red
lines(data$microsoft, col = "red")
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",header = TRUE)
data
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",header = TRUE)
plot(data$microsoft,main = "microsoft")
head(data)
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE)
head(data)
# Plot the second time series and change title
plot(data$microsoft,main = "microsoft")
# Replot with same title, add subtitle, use bars
plot(data$microsoft, main = "microsoft", sub = "Daily closing price since 2015", type = "h")
# Change line color to red
lines(data$microsoft, col = "red")
#
## Current portfolio description
#
data<-read.csv("Existing-portfolio.csv",header=TRUE)
# Plot the portfolio value
plot(data$value, main = "Portfolio Value")
# Plot the portfolio return
plot(data$return, main = "Portfolio Return")
# Plot a histogram of portfolio return
hist(data$return, probability = TRUE)
# Add a density line in red and twice as thick as normal
lines(density(data$return), col = "red", lwd = 2)
#
##Control graphic parameters
#
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE)
# Plot two charts on same graphical window
par(mfrow = c(2,1))
plot(data$yahoo,main="yahoo")
plot(data$microsoft,main="microsoft")
# Replot with reduced margin to 60% and character sizes to 80%
par(mfrow = c(2, 1), mex = 0.6, cex = 0.8)
plot(data$yahoo,main="yahoo")
plot(data$microsoft,main="microsoft")
# Plot two charts on same graphical window
par(mfrow = c(2,1))
autoplot(data$yahoo,main="yahoo")
autoplot(data$microsoft,main="microsoft")
# Replot with reduced margin to 60% and character sizes to 80%
par(mfrow = c(2, 1), mex = 0.6, cex = 0.8)
autoplot(data$yahoo,main="yahoo")
autoplot(data$microsoft,main="microsoft")
library(fpp2)
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE)
# Plot two charts on same graphical window
par(mfrow = c(2,1))
autoplot(data$yahoo,main="yahoo")
autoplot(data$microsoft,main="microsoft")
# Replot with reduced margin to 60% and character sizes to 80%
par(mfrow = c(2, 1), mex = 0.6, cex = 0.8)
autoplot(data$yahoo,main="yahoo")
autoplot(data$microsoft,main="microsoft")
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE)
# Plot the second time series and change title
plot(data$microsoft,main = "microsoft")
# Replot with same title, add subtitle, use bars
plot(data$microsoft, main = "microsoft", sub = "Daily closing price since 2015", type = "h")
# Change line color to red
lines(data$microsoft, col = "red")
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE)
# Display the first few lines of the data
head(data)
# Display the column names of the data
colnames(data)
# Plot yahoo data and add title
plot(data$yahoo,main ="yahoo")
# Replot yahoo data with labels for X and Y axes
plot(data$yahoo,main ="yahoo",xlab = "date",ylab = "price")
plot(data$index,data$yahoo,main="yahoo")
data$Index
plot(data$Index,data$yahoo,main="yahoo")
my_ts <- data$yahoo
my_ts2 <- data$microsoft
plot(my_ts,main = "My Stocks")
lines(my_ts2,col = "red")
axis(side = 4, at = pretty(my_ts2)) # scale new axis
legend(x = "bottomright", legend = c("Stock X","Stock Y"),
col = c("black","red"),lty = c(1,1))
install.packages("PerformanceAnalytics")
#highlight a period with Performance Analytics
library(PerformanceAnalytics)
period <- c("2014-01/2015-06")
chart.TimeSeries(my_ts,period.areas = period,main ="my_ts")
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE)
# Plot the "microsoft" series
plot(data$microsoft,main = "Stock prices since 2015")
# Add the "dow_chemical" series in red
lines(data$dow_chemical,col = "red")
# Add a Y axis on the right side of the chart
axis(side = 4, at = pretty(data$dow_chemical))
# Add a legend in the bottom right corner
legend(x = "bottomright", legend = c("microsoft","dow_chemical"), col = c("black","red"), lty = c(1,1))
#
##Highlighting events in a time series
#
# Plot the "citigroup" time series
plot(data$citigroup,main = "Citigroup")
# Create vert_line to identify January 4th, 2016 in citigroup
vert_line <- which(index(data$citigroup) == as.Date("2016-01-04"))
# Add a red vertical line using vert_line
abline( v = .index(data$citigroup)[vert_line], col = "red")
# Create hori_line to identify average price of citigroup
hori_line <- mean(data$citigroup)
# Add a blue horizontal line using hori_line
abline(h = hori_line, col = "blue")
# Create period to hold the 3 months of 2015
period <- c("2015-01/2015-03")
# Highlight the first three months of 2015
chart.TimeSeries(data$citigroup,period.areas = period)
# Highlight the first three months of 2015 in light grey
chart.TimeSeries(data$citigroup,period.areas = period,period.color ='lightgrey')
head(data$citigroup)
head(data)
data <- ts(data,start = c(2015,1),frequency = 365)
# Create period to hold the 3 months of 2015
period <- c("2015-01/2015-03")
# Highlight the first three months of 2015
chart.TimeSeries(data$citigroup,period.areas = period)
# Highlight the first three months of 2015 in light grey
chart.TimeSeries(data$citigroup,period.areas = period,period.color ='lightgrey')
data
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE)
data <- as.xts(data)
data_ts <- xts(x =data, order.by = data$Index)
ts(data = data)
View(data)
ts(data = data, start = "2015-02-01")
typeof(data$citigroup)
chart.TimeSeries(data$citigroup,period.areas = period)
head(data$citigroup)
index(data) <- data$Index
ts(data,start = c(2015,01,02))
ts(data,start = c(2015,01,02),frequency = 365)
read.csv(data,row.names = "Index" )
data2<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE,row.names = "Index")
head(data2)
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE,row.names = "Index")
# Create period to hold the 3 months of 2015
period <- c("2015-01/2015-03")
# Highlight the first three months of 2015
chart.TimeSeries(data$citigroup,period.areas = period)
# Highlight the first three months of 2015 in light grey
chart.TimeSeries(data$citigroup,period.areas = period,period.color ='lightgrey')
data$citigroup
row.names(data)
citigroup = ts(data = data$citigroup,frequency = 365,)
citigroup = ts(data = data$citigroup,frequency = 365,start = c(2015,01,02),end = c(2016,12,30))
head(citigroup)
microsoft = ts(data = data$microsoft,frequency = 365, start = c(2015,01,02), end = c(2016,12,30))
cbind(citigroup,microsoft)
names(data)
chart.TimeSeries(data$citigroup,period.areas = period)
timeBased(data)
data[,1] <- as.Date(data[,1])
data <- xts(data)
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE)
xts(data)
data2 <- xts(data, order.by = as.POSIXct(data$Index))
head(data2)
data2 <- xts(data[,-1], order.by = as.POSIXct(data$Index))
head(data2)
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
# Create period to hold the 3 months of 2015
period <- c("2015-01/2015-03")
# Highlight the first three months of 2015
chart.TimeSeries(data$citigroup,period.areas = period)
# Highlight the first three months of 2015 in light grey
chart.TimeSeries(data$citigroup,period.areas = period,period.color ='lightgrey')
data<-read.csv("Daily-stocks-for-YHOO-MSFT-C-and-DOW.csv",sep = " ",header = TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
# Create period to hold the 3 months of 2015
period <- c("2015-01/2015-03")
# Highlight the first three months of 2015
chart.TimeSeries(data$citigroup,period.areas = period)
# Highlight the first three months of 2015 in light grey
chart.TimeSeries(data$citigroup,period.areas = period,period.color ='lightgrey')
#
## Fancy stock chart
#
# Plot the microsoft series
plot(data$microsoft, main = "Dividend date and amount")
# Add the citigroup series
lines(data$citigroup, col = "orange", lwd = 2)
# Add a new y axis for the citigroup series
axis(side = 4, at = pretty(data$citigroup), col = "orange")
# Create the two legend strings
micro <- paste0("Microsoft div. of ", "$0.39"," on ", "15 Nov. 2016")
citi <- paste0("Citigroup div. of ","$0.16"," on ", "13 Nov. 2016")
# Create the legend in the bottom right corner
legend(x = "bottomright", legend = c(micro, citi), col = c("black", "orange"), lty = c(1, 1))
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
head(data)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
head(data)
data$apple
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
head(data)
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data<xts(data[,-1],order.by = data$Index)
data<-xts(data[,-1],order.by = data$Index)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
head(data)
colnames(data)
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- xts(data, order.by = as.POSIXct(data$Index)) ## convert to time-based
head(data)
data <-data[,-1]
head(Data)
head(data)
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- xts(data, order.by = as.POSIXct(data$Index)) ## convert to time-based
data<-data[,-1]
source('C:/Users/dell/Desktop/DataCamp-Practice/Time Series in R/Visualising Time Series in R/2. Univariate time series.R', echo=TRUE)
colnames(data)
colnames(data) <- c("apple")
colnames(data)
library(TTR)
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
colnames(data) <-"apple"
head(data)
library(TTR)
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
colnames(data) <-"apple"
# Plot Apple's stock price
plot(data$apple,main = "Apple stock price")
# Create a time series called rtn
rtn <- ROC(data) # ROC = rate of change
# Plot Apple daily price and daily returns
par(mfrow = c(1,2))
plot(data)
plot(rtn)
