# Plot forecasts from an ARIMA(0,0,1) model with a constant
austa %>% Arima(order = c(0,0,1),include.constant = TRUE) %>% forecast() %>% autoplot()
# Plot forecasts from an ARIMA(0,2,1) model with no constant
austa %>% Arima(order = c(0,2,1),include.constant = FALSE) %>% forecast() %>% autoplot()
data("debitcards") ## Iceland debit cards useage
autoplot(debitcards) + xlab("Year") + ylab("millions ISK")+
ggtitle("Retail debit card usage in Iceland")
fit <-auto.arima(debitcards,lambda = 0) ## box-cox lambda = 0 = log transform
fit_seasonal <-auto.arima(debitcards,lambda = 0) ## box-cox lambda = 0 = log transform
fit_Seasonal
fit_seasonal
fit_seasonal %>% forecast(=36) %>%
autoplot() + xlab("Year")
fit_seasonal %>% forecast(h=36) %>%
autoplot() + xlab("Year")
# Find an ARIMA model for euretail
fit1 <- auto.arima(euretail)
# Don't use a stepwise search
fit2 <- auto.arima(euretail, stepwise = FALSE)
# AICc of better model
AICc <- 68.39
# Compute 2-year forecasts from better model
fit2 %>% forecast(h = 8) %>% autoplot()
fit2
fit1
# Use 20 years of the qcement data beginning in 1988
train <- window(qcement, start = 1988, end = c(2007,4))
# Fit an ARIMA and an ETS model to the training data
fit1 <- auto.arima(train)
fit2 <- ets(train)
# Check that both models have white noise residuals
checkresiduals(fit1)
checkresiduals(fit2)
# Produce forecasts for each model
fc1 <- forecast(fit1, h = 25)
fc2 <- forecast(fit2, h = 25)
# Use accuracy() to find better model based on RMSE
accuracy(fc1, qcement)
accuracy(fc2, qcement)
bettermodel <- fit2
#
## Dynamic regression
#
data("uschange")
#plot us personal consumption and income
autoplot(uschange[,1:2], facets = TRUE) + xlab("Year")
data("uschange")
#plot us personal consumption and income
autoplot(uschange[,1:2], facets = TRUE) + xlab("Year")
## relationship between income and consumption
ggplot(aes(x = Income, y = Consumption),
data = as.data.frame(uschange)) +
geom_point() +
ggtitle("Quarterly changes in US consumption and personal income")
fit <- auto.arima(uschange[,"Consumption"],
xreg = uschange[,"Income"])\
fit
## Fitting dynamic regression, add xreg argument
fit <- auto.arima(uschange[,"Consumption"],
xreg = uschange[,"Income"])
fit
checkresiduals(fit)
autoplot(fcast) + ylab("Percentage Change")
fcast <- forecast(fit, xreg = rep(0.8,8)) ## assumefuture income change by 0.8 per quarter for the next 8 quarter
autoplot(fcast) + ylab("Percentage Change")
data(advert)
data(advert,package = fma)
install.packages(fma)
install.packages("fma")
install.packages("fma")
library(fma)
data(advert)
data(advert,package = 'fma')
library(fpp2)
data(cafe)
library(fpp2)
library(fpp)
data(cafe)
library(fpp2)
library(fpp)
data(cafe)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=1),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=1, h =24)) %>%
autoplot() +ylim(1.6,5.1)
autoplot(fit)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=3),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=3, h =24)) %>%
autoplot() +ylim(1.6,5.1)
data(cafe)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=3),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=3, h =24)) %>%
autoplot() +ylim(1.6,5.1)
cafe
data(cafe)
fit <- auto.arima(cafe,xreg = fourier(cafe, K=1),
seasonal = FALSE,## set seasonal error = false,arima error - non-seasonal
lambda = 0)  ## box-cox transformation with lambda = 0
fit %>% forecast(xreg = fourier(cafe, K=1, h =24)) %>%
autoplot() +ylim(1.6,5.1)
#
## Forecast weekly data
#
# Set up harmonic regressors of order 13
harmonics <- fourier(gasoline, K = 13)
# Fit regression model with ARIMA errors
fit <- auto.arima(gasoline, xreg = harmonics, seasonal = FALSE)
# Forecasts next 3 years
newharmonics <- fourier(gasoline, K = 13, h = 156)
fc <- forecast(fit, xreg = newharmonics)
# Plot forecasts fc
autoplot(fc)
data(taylor)
#
##Harmonic regression for multiple seasonality
#
data(taylor)#half-hourly electricity demand in England
## 2 seasonality 48(daily seasonality) and 3*48 = 336 (weekly seasonality)
# Fit a harmonic regression using order 10 for each type of seasonality
fit <- tslm(taylor ~ fourier(taylor, K = c(10, 10)))
# Forecast 20 working days ahead
fc <- forecast(fit, newdata = data.frame(fourier(, K = c(10, 10), h = 20*48)))
# Plot the forecasts
autoplot(fc)
# Forecast 20 working days ahead
fc <- forecast(fit, newdata = data.frame(fourier(taylor, K = c(10, 10), h = 20*48)))
# Plot the forecasts
autoplot(fc)
# Plot the calls data
autoplot(calls)
# Set up the xreg matrix
xreg <- fourier(calls, K = c(10,0))
# Fit a dynamic regression model
fit <- auto.arima(calls, xreg = xreg, seasonal = FALSE, stationary = TRUE)
# Check the residuals
checkresiduals(fit)
# Plot forecasts for 10 working days ahead
fc <- forecast(fit, xreg =  fourier(calls, c(10, 0), h = 1690))
autoplot(fc)
data("gasoline")
gasoline %>% tbats() %>% forecast() %>%
autoplot() +
xlab("Year") + ylab("thousands barrels per day")
# Plot the gas data
autoplot(gas)
# Fit a TBATS model to the gas data
fit <- tbats(gas)
# Forecast the series for the next 5 years
fc <- forecast(fit,h=60)
# Plot the forecasts
autoplot(fc)
# Record the Box-Cox parameter and the order of the Fourier terms
lambda <- 0.082
K <- 5
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
colnames(data) <-"apple"
# Plot Apple's stock price
plot(data$apple,main = "Apple stock price")
# Create a time series called rtn
rtn <- ROC(data) # ROC = rate of change
# Plot Apple daily price and daily returns
par(mfrow = c(1,2))
plot(data)
plot(rtn)
library(TTR)
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
colnames(data) <-"apple"
# Plot Apple's stock price
plot(data$apple,main = "Apple stock price")
# Create a time series called rtn
rtn <- ROC(data) # ROC = rate of change
# Plot Apple daily price and daily returns
par(mfrow = c(1,2))
plot(data)
plot(rtn)
setwd("C:/Users/dell/Desktop/DataCamp-Practice/Time Series in R/Visualising Time Series in R")
library(TTR)
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
colnames(data) <-"apple"
# Plot Apple's stock price
plot(data$apple,main = "Apple stock price")
# Create a time series called rtn
rtn <- ROC(data) # ROC = rate of change
# Plot Apple daily price and daily returns
par(mfrow = c(1,2))
plot(data)
plot(rtn)
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
library(fpp2)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
library(xts)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
library(TTR)
library(xts)
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
colnames(data) <-"apple"
# Plot Apple's stock price
plot(data$apple,main = "Apple stock price")
# Create a time series called rtn
rtn <- ROC(data) # ROC = rate of change
# Plot Apple daily price and daily returns
par(mfrow = c(1,2))
plot(data)
plot(rtn)
head(rtn)
# Create a histogram of Apple stock returns
hist(rtn,probability = TRUE,
main = "Apple stock return distribution" )
# Add a density line
lines(density(rtn))
# Redraw a thicker, red density line
lines(density(rtn),col = "red",lwd = 2)
rtn <- rtn[-1,] # remove the first row
# Create a histogram of Apple stock returns
hist(rtn,probability = TRUE,
main = "Apple stock return distribution" )
# Add a density line
lines(density(rtn))
# Redraw a thicker, red density line
lines(density(rtn),col = "red",lwd = 2)
# Draw box and whisker plot for the Apple returns
boxplot(rtn,horizontal = TRUE)
# Draw a box and whisker plot of a normal distribution
boxplot(rnorm(1000),horizontal = TRUE)
# Redraw both plots on the same graphical window
par(mfrow = c(2,1))
boxplot(rtn,horizontal = TRUE)
boxplot(rnorm(1000),horizontal = TRUE)
boxplot(rtn$apple,horizontal = TRUE)
rtn$apple
data<-read.csv("Daily-returns-for-Apple.csv",sep = " ",header = TRUE)
data <- data[,-1]
head(data)
rtn1 <- ROC(data)
rtn1
boxplot(rtn1,horizontal = TRUE)
# Draw a box and whisker plot of a normal distribution
boxplot(rnorm(1000),horizontal = TRUE)
# Redraw both plots on the same graphical window
par(mfrow = c(2,1))
boxplot(rtn1,horizontal = TRUE)
boxplot(rnorm(1000),horizontal = TRUE)
# Draw autocorrelation plot
acf(rtn, main = "Apple return autocorrelation")
# Redraw with a maximum lag of 10
acf(rtn, main = "Apple return autocorrelation",lag.max = 10)
# Draw histogram and add red density line
hist(rtn,probability = TRUE)
lines(density(rtn),col = "red" )
# Draw box and whisker plot
boxplot(rtn)
# Draw autocorrelogram
acf(rtn)
# Draw q-q plot and add a red line for normality
qqnorm(rtn)
qqline(rtn, col = "red")
stocka = c(0.1, 0.4, 0.5, 0.5, 0.2, 0.3, 0.7, 0.8, 0.7, 0.2, 0.1, 0.2)
stockb = 1 - stocka
stock b
stockb
stocka = c(0.1, 0.4, 0.5, 0.5, 0.2, 0.3, 0.7, 0.8, 0.7, 0.2, 0.1, 0.2)
stockb = 1 - stocka
portfolio <- data.frame("stocka" = stocka, "stockb" = stockb)
# Plot stacked barplot
barplot(portfolio)
# Plot grouped barplot
barplot(portfolio, beside = TRUE)
typeof(portfolio)
portfolio <- cbind(stocka, stockb)
# Plot stacked barplot
barplot(portfolio)
# Plot grouped barplot
barplot(portfolio, beside = TRUE)
data<-read.csv("Returns-for-XOM-C-MSFT-DOW-and-YHOO.csv",header = TRUE, sep = " ")
head(data)
data<-read.csv("Returns-for-XOM-C-MSFT-DOW-and-YHOO.csv",header = TRUE, sep = ",")
head(data)
# Draw the scatterplot
plot(x = sp500,y=citi)
# Draw a regression line
abline(reg = lm(citi~sp500),col = "red", lwd = 2)
data<-read.csv("Returns-for-XOM-C-MSFT-DOW-and-YHOO.csv",header = TRUE, sep = ",")
sp500 <- data$sp500
citi <- data$citigroup
# Draw the scatterplot
plot(x = sp500,y=citi)
# Draw a regression line
abline(reg = lm(citi~sp500),col = "red", lwd = 2)
my_data<-read.csv("Returns-for-XOM-C-MSFT-DOW-and-YHOO.csv",header = TRUE, sep = ",")
# Create correlation matrix using Pearson method
cor(my_data,method = "pearson")
# Create correlation matrix using Spearman method
cor(my_data,method = "spearman")
head(my_data)
my_data <- xts(my_data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
head(my_data)
# Create correlation matrix using Pearson method
cor(my_data,method = "pearson")
# Create correlation matrix using Spearman method
cor(my_data,method = "spearman")
# Create scatterplot matrix
pairs(my_data)
# Create upper panel scatterplot matrix
pairs(my_data,lower.panel = NULL)
install.packages("corrplot")
cor_mat <- cor(my_data[,2:6])
library(corrplot)
corrplot(cor_mat)
# Create correlation matrix with numbers
corrplot(cor_mat,method = "number")
# Create correlation matrix with colors
corrplot(cor_mat,method = "color")
# Create upper triangle correlation matrix
corrplot(cor_mat, method = "number", type = "upper")
library(corrplot)
cor_mat <- cor(my_data[,2:6])
par(mfrow = c(1,1))
# Create correlation matrix
corrplot(cor_mat)
# Create correlation matrix with numbers
corrplot(cor_mat,method = "number")
# Create correlation matrix with colors
corrplot(cor_mat,method = "color")
# Create upper triangle correlation matrix
corrplot(cor_mat, method = "number", type = "upper")
#
## Current portfolio description
#
data<-read.csv("Existing-portfolio.csv",header=TRUE)
# Plot the portfolio value
plot(data$value, main = "Portfolio Value")
# Plot the portfolio return
plot(data$return, main = "Portfolio Return")
# Plot a histogram of portfolio return
hist(data$return, probability = TRUE)
# Add a density line in red and twice as thick as normal
lines(density(data$return), col = "red", lwd = 2)
head(data)
data<-read.csv("Existing-portfolio.csv",header=TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
# Plot the portfolio value
plot(data$value, main = "Portfolio Value")
# Plot the portfolio return
plot(data$return, main = "Portfolio Return")
# Plot a histogram of portfolio return
hist(data$return, probability = TRUE)
# Add a density line in red and twice as thick as normal
lines(density(data$return), col = "red", lwd = 2)
head(data)
data <- read.csv("Stock-data-for-GS-KO-DIS-and-CAT.csv",header = TRUE, sep = " ")
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
head(data)
data <- read.csv("Stock-data-for-GS-KO-DIS-and-CAT.csv",header = TRUE, sep = ",")
head(data)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
head(Data)
head(data)
# Plot the four stocks on the same window with 80% margin and character size
par(mfrow = c(2,2),mex = 0.8,cex = 0.8)
plot(data$GS)
plot(data$KO)
plot(data$DIS)
plot(data$CAT)
data1<-read.csv("Existing-portfolio.csv",header=TRUE)
data1 <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
portfolio <- data1$return
head(data1)
data<-read.csv("Existing-portfolio.csv",header=TRUE)
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
data1<-read.csv("Existing-portfolio.csv",header=TRUE)
data1 <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
portfolio <- data1$return
data1<-read.csv("Existing-portfolio.csv",header=TRUE)
data1 <- xts(data1[,-1], order.by = as.POSIXct(data1$Index)) ## convert to time-based
data <- read.csv("Stock-data-for-GS-KO-DIS-and-CAT.csv",header = TRUE, sep = ",")
data <- xts(data[,-1], order.by = as.POSIXct(data$Index)) ## convert to time-based
portfolio <- data1$return
head(portfolio)
data1<-read.csv("Existing-portfolio.csv",header=TRUE)
portfolio <- data1$return
head(portfolio)
data1<-read.csv("Existing-portfolio.csv",header=TRUE)
portfolio <- data1$return
# Draw the scatterplot of gs against the portfolio
plot(x = gs, y = portfolio)
# Add a regression line in red with twice as thick as normal
abline(reg = lm(gs ~ portfolio), col = "red", lwd = 2)
# Plot scatterplots and regression lines to a 2x2 window
par(mfrow = c(2, 2))
plot(x = gs, y = portfolio)
abline(reg = lm(gs ~ portfolio), col = "red", lwd = 2)
plot(x = ko, y = portfolio)
abline(reg = lm(ko ~ portfolio), col = "red", lwd = 2)
plot(x = dis, y = portfolio)
abline(reg = lm(dis ~ portfolio), col = "red", lwd = 2)
plot(x = cat, y = portfolio)
abline(reg = lm(cat ~ portfolio), col = "red", lwd = 2)
data1<-read.csv("Existing-portfolio.csv",header=TRUE)
portfolio <- data1$return
gs <-data$GS
ko <-data$KO
dis <- data$DIS
cat <- data$cat
# Draw the scatterplot of gs against the portfolio
plot(x = gs, y = portfolio)
# Add a regression line in red with twice as thick as normal
abline(reg = lm(gs ~ portfolio), col = "red", lwd = 2)
# Plot scatterplots and regression lines to a 2x2 window
par(mfrow = c(2, 2))
plot(x = gs, y = portfolio)
abline(reg = lm(gs ~ portfolio), col = "red", lwd = 2)
plot(x = ko, y = portfolio)
abline(reg = lm(ko ~ portfolio), col = "red", lwd = 2)
plot(x = dis, y = portfolio)
abline(reg = lm(dis ~ portfolio), col = "red", lwd = 2)
plot(x = cat, y = portfolio)
abline(reg = lm(cat ~ portfolio), col = "red", lwd = 2)
portfolio <- data1$return
gs <-data$GS
ko <-data$KO
dis <- data$DIS
cat <- data$cat
# Draw the scatterplot of gs against the portfolio
plot(x = gs, y = portfolio)
par(mfrow = c(1,1))
# Draw the scatterplot of gs against the portfolio
plot(x = gs, y = portfolio)
gs <-ROC(data$GS)
plot(x = gs, y = portfolio)
head(portfolio)
plot(x = gs, y = portfolio)
data<-read.csv("Existing-portfolio.csv",header=TRUE)
gs <-ROC(data$GS)
data1<-read.csv("Existing-portfolio.csv",header=TRUE)
portfolio <- data1$return
data <- read.csv("Stock-data-for-GS-KO-DIS-and-CAT.csv",header = TRUE, sep = ",")
gs <-ROC(data$GS)
plot(x = gs, y = portfolio)
head(gs)
gs <-ROC(data$GS)[-1,]
gs <-ROC(data$GS)[-1]
plot(x = gs, y = portfolio)
## return of gs,ko,dis and cat
gs <-ROC(data$GS)[-1]
ko <-ROC(data$KO)[-1]
dis <- ROC(data$DIS)[-1]
cat <- ROC(data$cat)[-1]
## set mfrom to (1,1)
par(mfrow = c(1,1))
# Draw the scatterplot of gs against the portfolio
plot(x = gs, y = portfolio)
abline(reg = lm(gs ~ portfolio), col = "red", lwd = 2)
# Add a regression line in red with twice as thick as normal
abline(reg = lm(gs ~ portfolio), col = "red", lwd = 2)
# Plot scatterplots and regression lines to a 2x2 window
par(mfrow = c(2, 2))
plot(x = gs, y = portfolio)
abline(reg = lm(gs ~ portfolio), col = "red", lwd = 2)
plot(x = ko, y = portfolio)
abline(reg = lm(ko ~ portfolio), col = "red", lwd = 2)
plot(x = dis, y = portfolio)
abline(reg = lm(dis ~ portfolio), col = "red", lwd = 2)
plot(x = cat, y = portfolio)
abline(reg = lm(cat ~ portfolio), col = "red", lwd = 2)
cat <- ROC(data$cat)[-1]
cat <- ROC(data$CAT)[-1]
## set mfrom to (1,1)
par(mfrow = c(1,1))
# Draw the scatterplot of gs against the portfolio
plot(x = gs, y = portfolio)
# Add a regression line in red with twice as thick as normal
abline(reg = lm(gs ~ portfolio), col = "red", lwd = 2)
# Plot scatterplots and regression lines to a 2x2 window
par(mfrow = c(2, 2))
plot(x = gs, y = portfolio)
abline(reg = lm(gs ~ portfolio), col = "red", lwd = 2)
plot(x = ko, y = portfolio)
abline(reg = lm(ko ~ portfolio), col = "red", lwd = 2)
plot(x = dis, y = portfolio)
abline(reg = lm(dis ~ portfolio), col = "red", lwd = 2)
plot(x = cat, y = portfolio)
abline(reg = lm(cat ~ portfolio), col = "red", lwd = 2)
old.vs.new.portfolio <- read.csv("old.vs.new.portfolio.csv",header = TRUE, sep = ",")
old.vs.new.portfolio <- read.csv("old.vs.new.portfolio.csv",header = TRUE, sep = ",")
old.vs.new.portfolio<- xts(old.vs.new.portfolio[,-1], order.by = as.POSIXct(old.vs.new.portfolio$Index)) ## convert to time-based
old.vs.new.portfolio <- read.csv("old.vs.new.portfolio.csv",header = TRUE, sep = ",")
old.vs.new.portfolio<- xts(old.vs.new.portfolio[,-1], order.by = as.POSIXct(old.vs.new.portfolio$Index)) ## convert to time-based
old.vs.new.portfolio <- read.csv("old.vs.new.portfolio.csv",header = TRUE, sep = ",")
old.vs.new.portfolio<- xts(old.vs.new.portfolio[,-1], order.by = as.POSIXct(old.vs.new.portfolio$Index)) ## convert to time-based
# Plot new and old portfolio values on same chart
plot(old.vs.new.portfolio$old.portfolio.value,col = "black")
lines(old.vs.new.portfolio$new.portfolio.value, col = "red")
# Plot density of the new and old portfolio returns on same chart
plot(density(old.vs.new.portfolio$old.portfolio.rtn),col = "black")
lines(density(old.vs.new.portfolio$new.portfolio.rtn),col = "red")
library(PerformanceAnalytics)
# Draw value, return, drawdowns of old portfolio
charts.PerformanceSummary(old.vs.new.portfolio$old.portfolio.rtn)
# Draw value, return, drawdowns of new portfolio
charts.PerformanceSummary(old.vs.new.portfolio$new.portfolio.rtn)
# Draw both portfolios on same chart
charts.PerformanceSummary(old.vs.new.portfolio[, c(3, 4)])
